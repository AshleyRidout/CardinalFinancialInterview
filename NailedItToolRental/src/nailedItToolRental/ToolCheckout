/*
 * Main method for user input, and to display the Tool Rental Agreement
 * 
 * @author Ashley Ridout
 * @version 1.0.1.0
 * @since 2018-12-16
 */
package nailedItToolRental;

import java.text.*;
import java.time.*;
import java.util.*;

public class ToolCheckout {

	public static void main(String[] args) {

		Tool rentedTool = new Tool();
		//temporary constructor to validate user input
		ToolRentalFeatures tempToolRentalFeatures = new ToolRentalFeatures();
		
		String toolCode;
		
		int numberOfRentalDays = 0;
		double discountAmount = 0;
		String userCheckoutDate;
		Date formattedCheckoutDate;
		Date dueDate;
		
		String stringDueDate;	
		int chargeDays = 0;
		int discountOnTool = 0;
		double totalChargeBeforeDiscount = 0;
		String formattedTotalChargeBeforeDiscount;
		String formattedDiscountAmount;
		String formattedTotalAfterDiscount;
		double finalCharge = 0;
		

		Scanner reader = new Scanner(System.in);

		// get tool code from the user
		System.out.println("Please enter the toolcode for the tool you'd like to rent.");
		while (true) {
			try {
				toolCode = reader.next();
				rentedTool = new Tool(toolCode);
				break;
			} catch (IllegalArgumentException e) {
				System.out.println("Please re-enter an existing tool code.");
				e.printStackTrace();
				continue;
			}
		}

		// get checkout date from the user
		System.out.println("Please enter the date for checkout tool in the format" 
				+ " MM/DD/YY. For example: 01/01/18.");
		while (true) {
			try {
				userCheckoutDate = reader.next();
				formattedCheckoutDate = tempToolRentalFeatures
						.formatSimpleDate(userCheckoutDate);
				break;
			} catch (ParseException e) {
				System.out.println("Please re-enter date in proper format.");
				e.printStackTrace();
				continue;
			}
		}

		// get number of rental days from the user
		System.out.println("Please select number of days to rent tool.");
		while (true) {
			try {
				numberOfRentalDays = reader.nextInt();
				tempToolRentalFeatures.validateNumberOfRentalDays(numberOfRentalDays);
				break;

			} catch (IllegalArgumentException e) {
				System.out.println("Please re-enter a number of rental days greater than 1.");
				e.printStackTrace();
				continue;
			}
		}
		
		// get percent discount from the user
		System.out.println("Please provide the percent discount on the rented tool, "
				+ "if applicable. For example: '20' for 20%.");	
		while (true) {
			try {
				discountOnTool = reader.nextInt();
				tempToolRentalFeatures.validateDiscountPercent(discountOnTool);
				break;
			} catch (IllegalArgumentException e) {
				System.out.println("Please re-enter a percent discount between 0 and 100.");
				e.printStackTrace();
				continue;
			}
		}
		
		//constructor to hold user input
		ToolRentalFeatures toolRentalFeatures = new ToolRentalFeatures(toolCode, userCheckoutDate,
				numberOfRentalDays, discountOnTool);
	
		// set rental dates for the tool
		List<LocalDate> listOfRentalDays = toolRentalFeatures
				.getDatesDuringRental(formattedCheckoutDate, numberOfRentalDays);
		
		// set due date for the tool
		dueDate = toolRentalFeatures.setDueDate(formattedCheckoutDate, numberOfRentalDays);
		stringDueDate = toolRentalFeatures.getDueDate(dueDate);
		
		// check if any dates are on a weekend");
		toolRentalFeatures.weekendDuringRental(listOfRentalDays);

		// check if any of the dates fall on Labor Day.");
		ToolRentalFeatures.isLaborDay(listOfRentalDays);

		// check if any of the dates fall on the observed date for 4th of July
		ToolRentalFeatures.isObservedJuly4th(listOfRentalDays);

		// get number of charge days
		chargeDays = toolRentalFeatures.getChargeDays(rentedTool, listOfRentalDays, 
				numberOfRentalDays);

		// get total charge before discount
		totalChargeBeforeDiscount = toolRentalFeatures
				.totalChargeBeforeDiscount(rentedTool, chargeDays);
		formattedTotalChargeBeforeDiscount = toolRentalFeatures
				.getFormattedTotalChargeBeforeDiscount(totalChargeBeforeDiscount);

		//get amount the tool is discounted 
		discountAmount = toolRentalFeatures.getDiscountAmount(totalChargeBeforeDiscount, 
				discountOnTool);
		formattedDiscountAmount = toolRentalFeatures
				.getFormattedDiscountAmount(discountAmount);
		
		// get the total amount charged to customer after discount
		finalCharge = toolRentalFeatures.totalChargeAfterDiscount(totalChargeBeforeDiscount, 
							discountAmount);
		formattedTotalAfterDiscount = toolRentalFeatures
				.getFormattedTotalChargeAfterDiscount(finalCharge);

		//generate an instance of the rental agreement
		ToolRentalAgreement toolRentalAgreement = new ToolRentalAgreement(rentedTool, 
				toolRentalFeatures);
		
		// close resources
		reader.close();
	}
}
