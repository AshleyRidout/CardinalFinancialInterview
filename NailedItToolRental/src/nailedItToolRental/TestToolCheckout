/* 
 * JUnit Test for Nailed It Tool Rental
 * 
 * @author Ashley Ridout
 * @version 1.0.1.0
 * @since 2018-12-23
 */

package nailedItToolRental;

import org.junit.Test;
import static org.junit.Assert.*;

import java.text.DecimalFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.List;

public class TestToolCheckout {
	   
	    String[] toolCode = {"JAKR","LADW","CHNS","JAKD","JAKR","JAKR"};
	    String[] stringCheckoutDate = {"9/3/15","7/2/20","7/2/15","9/3/15","7/2/15","7/2/20"};
	    int[] numberOfRentalDays = {5,3,5,6,9,4};
	    int[] percentDiscount = {101,10,25,0,0,50};
	    
	    String[] stringDueDate = {"","7/5/20","7/7/15","9/9/15","7/11/15", "7/6/20"};
	    String[] outputDailyCharge = {"$0.00","$1.99","$1.49","$2.99","$2.99","$2.99"};
	    int[] chargeDays = {0,2,3,3,5,1};
	    double[] inputTotalBeforeDiscount = {0,3.98,4.47,8.97,14.95,2.99};
	    String[] formattedTotalBeforeDiscount = {"$0.00","$3.98","$4.47","$8.97","$14.95","$2.99"};
	    String[] outputPercentDiscount = {"0.00%","10%","25%","0%","0%","50%"};
	    double[] inputDiscountAmount = {0.00,0.40,1.12,0.00,0.00,1.50};
	    String[] formatDiscountAmount = {"$0.00","$0.40","$1.12","$0.00","$0.00","$1.50"};
	    String[] formatTotalAfterDiscount = {"$0.00", "$3.58","$3.35","$8.97","$14.95","$1.49",""};
	    
	    /**
	     * Test of setRentalDetails method, of class RentalDetails.
	     */
	    @Test(expected = IllegalArgumentException.class)
	    public void Test1() throws Exception {
	        System.out.println("Test 1");
	        String code = toolCode[0];
	        Tool rentedTool = new Tool(code);
	        
	        int rentalDays = numberOfRentalDays[0];
	        String checkoutDate = stringCheckoutDate[0];
	        String dueDate = stringDueDate[0];
	        int numberOfChargeDays = chargeDays[0];
	        double inputTotalBefore = inputTotalBeforeDiscount[0]; 
	        double inputDiscount = inputDiscountAmount[0];
	        int discount = percentDiscount[0];
	        
	        ToolRentalFeatures toolRentalFeatures = new ToolRentalFeatures(code, checkoutDate,
	        		 rentalDays, discount);
	        toolRentalFeatures.validateNumberOfRentalDays(rentalDays);
	        toolRentalFeatures.validateDiscountPercent(discount);
	        
	        Date dateCheckoutDate = toolRentalFeatures.formatSimpleDate(checkoutDate);
	        
	     // set rental dates for the tool
			List<LocalDate> listOfRentalDays = toolRentalFeatures
					.getDatesDuringRental(dateCheckoutDate, rentalDays);
			
			// set due date for the tool
			Date dateDueDate = toolRentalFeatures.setDueDate(dateCheckoutDate, rentalDays);
			dueDate = toolRentalFeatures.getDueDate(dateDueDate);

			// check if any dates are on a weekend");
			toolRentalFeatures.weekendDuringRental(listOfRentalDays);

			// check if any of the dates fall on Labor Day.");
			ToolRentalFeatures.isLaborDay(listOfRentalDays);

			// check if any of the dates fall on the observed date for 4th of July
			ToolRentalFeatures.isObservedJuly4th(listOfRentalDays);

			// get number of charge days
			numberOfChargeDays = toolRentalFeatures.getChargeDays(rentedTool, listOfRentalDays, 
					rentalDays);

			// get total charge before discount
			double totalChargeBeforeDiscount = toolRentalFeatures
					.totalChargeBeforeDiscount(rentedTool, numberOfChargeDays);
			String formattedTotalChargeBeforeDiscount = toolRentalFeatures
					.getFormattedTotalChargeBeforeDiscount(totalChargeBeforeDiscount);

			//get amount the tool is discounted 
			double discountAmount = toolRentalFeatures.getDiscountAmount(totalChargeBeforeDiscount, 
					discount);
			String formattedDiscountAmount = toolRentalFeatures
					.getFormattedDiscountAmount(discountAmount);
			
			// get the total amount charged to customer after discount
			double finalCharge = toolRentalFeatures.totalChargeAfterDiscount(totalChargeBeforeDiscount, 
								discountAmount);
			String formattedTotalAfterDiscount = toolRentalFeatures
					.getFormattedTotalChargeAfterDiscount(finalCharge);
	        
	        ToolRentalAgreement toolRentalAgreement = new ToolRentalAgreement
	        			(rentedTool, toolRentalFeatures);
	        
	        double decimalPercentDiscount = discount * .01;
			String formattedDiscountPercent = new DecimalFormat("##%").format(decimalPercentDiscount);
	        
	        String getToolCode =  rentedTool.toolCode;
	        int getRentalDays = toolRentalFeatures.numberOfRentalDays;
	        String getCheckoutDate = toolRentalFeatures.userCheckoutDate;
	        String getDueDate = toolRentalFeatures.stringDueDate;
	        String getDailyCharge = rentedTool.formattedDailyCharge;
	        int getChargeDays = toolRentalFeatures.chargeDays;
	        String getChargeBeforeDiscount = toolRentalFeatures.formattedTotalBeforeDiscount;
	        String getOutputDiscount = formattedDiscountPercent;
	        String getDiscountAmount = toolRentalFeatures.formattedDiscountAmount;
	        String getChargeAfterDiscount = toolRentalFeatures.formattedTotalAfterDiscount;

	        assertEquals(getToolCode, toolCode[0]);
	        assertEquals(getRentalDays, numberOfRentalDays[0]);
	        assertEquals(getCheckoutDate, stringCheckoutDate[0]);
	        assertEquals(getDueDate, stringDueDate[0]);
	        assertEquals(getDailyCharge, outputDailyCharge[0]);
	        assertEquals(getChargeDays, chargeDays[0]);
	        assertEquals(getChargeBeforeDiscount, formattedTotalBeforeDiscount[0]);
	        assertEquals(getOutputDiscount, outputPercentDiscount[0]);
	        assertEquals(getDiscountAmount, formatDiscountAmount[0]);
	        assertEquals(getChargeAfterDiscount, formatTotalAfterDiscount[0]);
	    }
	      
	    
	    @Test
	    public void Test2() throws Exception {
	    System.out.println("\nTest 2");
        String code = toolCode[1];
        Tool rentedTool = new Tool(code);
        
        int rentalDays = numberOfRentalDays[1];
        String checkoutDate = stringCheckoutDate[1];
        String dueDate = stringDueDate[1];
        int numberOfChargeDays = chargeDays[1];
        double inputTotalBefore = inputTotalBeforeDiscount[1]; 
        double inputDiscount = inputDiscountAmount[1];
        int discount = percentDiscount[1];
        
        ToolRentalFeatures toolRentalFeatures = new ToolRentalFeatures(code, checkoutDate,
        		 rentalDays, discount);
        
        Date dateCheckoutDate = toolRentalFeatures.formatSimpleDate(checkoutDate);

     // set rental dates for the tool
		List<LocalDate> listOfRentalDays = toolRentalFeatures
				.getDatesDuringRental(dateCheckoutDate, rentalDays);
		
		// set due date for the tool
		Date dateDueDate = toolRentalFeatures.setDueDate(dateCheckoutDate, rentalDays);
		dueDate = toolRentalFeatures.getDueDate(dateDueDate);

		// check if any dates are on a weekend");
		toolRentalFeatures.weekendDuringRental(listOfRentalDays);

		// check if any of the dates fall on Labor Day.");
		ToolRentalFeatures.isLaborDay(listOfRentalDays);

		// check if any of the dates fall on the observed date for 4th of July
		ToolRentalFeatures.isObservedJuly4th(listOfRentalDays);

		// get number of charge days
		numberOfChargeDays = toolRentalFeatures.getChargeDays(rentedTool, listOfRentalDays, 
				rentalDays);

		// get total charge before discount
		double totalChargeBeforeDiscount = toolRentalFeatures
				.totalChargeBeforeDiscount(rentedTool, numberOfChargeDays);
		String formattedTotalChargeBeforeDiscount = toolRentalFeatures
				.getFormattedTotalChargeBeforeDiscount(totalChargeBeforeDiscount);

		//get amount the tool is discounted 
		double discountAmount = toolRentalFeatures.getDiscountAmount(totalChargeBeforeDiscount, 
				discount);
		String formattedDiscountAmount = toolRentalFeatures
				.getFormattedDiscountAmount(discountAmount);
		
		// get the total amount charged to customer after discount
		double finalCharge = toolRentalFeatures.totalChargeAfterDiscount(totalChargeBeforeDiscount, 
							discountAmount);
		String formattedTotalAfterDiscount = toolRentalFeatures
				.getFormattedTotalChargeAfterDiscount(finalCharge);
        ToolRentalAgreement toolRentalAgreement = new ToolRentalAgreement
        			(rentedTool, toolRentalFeatures);
        
        double decimalPercentDiscount = discount * .01;
		String formattedDiscountPercent = new DecimalFormat("##%").format(decimalPercentDiscount);
        
        String getToolCode =  rentedTool.toolCode;
        int getRentalDays = toolRentalFeatures.numberOfRentalDays;
        String getCheckoutDate = toolRentalFeatures.userCheckoutDate;
        String getDueDate = toolRentalFeatures.stringDueDate;
        String getDailyCharge = rentedTool.formattedDailyCharge;
        int getChargeDays = toolRentalFeatures.chargeDays;
        String getChargeBeforeDiscount = toolRentalFeatures.formattedTotalBeforeDiscount;
        String getOutputDiscount = formattedDiscountPercent;
        String getDiscountAmount = toolRentalFeatures.formattedDiscountAmount;
        String getChargeAfterDiscount = toolRentalFeatures.formattedTotalAfterDiscount;

        assertEquals(getToolCode, toolCode[1]);
        assertEquals(getRentalDays, numberOfRentalDays[1]);
        assertEquals(getCheckoutDate, stringCheckoutDate[1]);
        assertEquals(getDueDate, stringDueDate[1]);
        assertEquals(getDailyCharge, outputDailyCharge[1]);
        assertEquals(getChargeDays, chargeDays[1]);
        assertEquals(getChargeBeforeDiscount, formattedTotalBeforeDiscount[1]);
        assertEquals(getOutputDiscount, outputPercentDiscount[1]);
        assertEquals(getDiscountAmount, formatDiscountAmount[1]);
        assertEquals(getChargeAfterDiscount, formatTotalAfterDiscount[1]);
	    }
	    
	    
	    @Test
	    public void Test3() throws Exception {
	    System.out.println("\nTest 3");
        String code = toolCode[2];
        Tool rentedTool = new Tool(code);
        
        int rentalDays = numberOfRentalDays[2];
        String checkoutDate = stringCheckoutDate[2];
        String dueDate = stringDueDate[2];
        int numberOfChargeDays = chargeDays[2];
        double inputTotalBefore = inputTotalBeforeDiscount[2]; 
        double inputDiscount = inputDiscountAmount[2];
        int discount = percentDiscount[2];
        
        ToolRentalFeatures toolRentalFeatures = new ToolRentalFeatures(code, checkoutDate,
        		 rentalDays, discount);
        
        Date dateCheckoutDate = toolRentalFeatures.formatSimpleDate(checkoutDate);
        
     // set rental dates for the tool
		List<LocalDate> listOfRentalDays = toolRentalFeatures
				.getDatesDuringRental(dateCheckoutDate, rentalDays);
		
		// set due date for the tool
		Date dateDueDate = toolRentalFeatures.setDueDate(dateCheckoutDate, rentalDays);
		dueDate = toolRentalFeatures.getDueDate(dateDueDate);

		// check if any dates are on a weekend");
		toolRentalFeatures.weekendDuringRental(listOfRentalDays);

		// check if any of the dates fall on Labor Day.");
		ToolRentalFeatures.isLaborDay(listOfRentalDays);

		// check if any of the dates fall on the observed date for 4th of July
		ToolRentalFeatures.isObservedJuly4th(listOfRentalDays);

		// get number of charge days
		numberOfChargeDays = toolRentalFeatures.getChargeDays(rentedTool, listOfRentalDays, 
				rentalDays);

		// get total charge before discount
		double totalChargeBeforeDiscount = toolRentalFeatures
				.totalChargeBeforeDiscount(rentedTool, numberOfChargeDays);
		String formattedTotalChargeBeforeDiscount = toolRentalFeatures
				.getFormattedTotalChargeBeforeDiscount(totalChargeBeforeDiscount);

		//get amount the tool is discounted 
		double discountAmount = toolRentalFeatures.getDiscountAmount(totalChargeBeforeDiscount, 
				discount);
		String formattedDiscountAmount = toolRentalFeatures
				.getFormattedDiscountAmount(discountAmount);
		
		// get the total amount charged to customer after discount
		double finalCharge = toolRentalFeatures.totalChargeAfterDiscount(totalChargeBeforeDiscount, 
							discountAmount);
		String formattedTotalAfterDiscount = toolRentalFeatures
				.getFormattedTotalChargeAfterDiscount(finalCharge);
        
        ToolRentalAgreement toolRentalAgreement = new ToolRentalAgreement
        			(rentedTool, toolRentalFeatures);
        
        double decimalPercentDiscount = discount * .01;
		String formattedDiscountPercent = new DecimalFormat("##%").format(decimalPercentDiscount);
        
        String getToolCode =  rentedTool.toolCode;
        int getRentalDays = toolRentalFeatures.numberOfRentalDays;
        String getCheckoutDate = toolRentalFeatures.userCheckoutDate;
        String getDueDate = toolRentalFeatures.stringDueDate;
        String getDailyCharge = rentedTool.formattedDailyCharge;
        int getChargeDays = toolRentalFeatures.chargeDays;
        String getChargeBeforeDiscount = toolRentalFeatures.formattedTotalBeforeDiscount;
        String getOutputDiscount = formattedDiscountPercent;
        String getDiscountAmount = toolRentalFeatures.formattedDiscountAmount;
        String getChargeAfterDiscount = toolRentalFeatures.formattedTotalAfterDiscount;

        assertEquals(getToolCode, toolCode[2]);
        assertEquals(getRentalDays, numberOfRentalDays[2]);
        assertEquals(getCheckoutDate, stringCheckoutDate[2]);
        assertEquals(getDueDate, stringDueDate[2]);
        assertEquals(getDailyCharge, outputDailyCharge[2]);
        assertEquals(getChargeDays, chargeDays[2]);
        assertEquals(getChargeBeforeDiscount, formattedTotalBeforeDiscount[2]);
        assertEquals(getOutputDiscount, outputPercentDiscount[2]);
        assertEquals(getDiscountAmount, formatDiscountAmount[2]);
        assertEquals(getChargeAfterDiscount, formatTotalAfterDiscount[2]);
	    }
	    
	    
	    @Test
	    public void Test4() throws Exception {
	    System.out.println("\nTest 4");
        String code = toolCode[3];
        Tool rentedTool = new Tool(code);
        
        int rentalDays = numberOfRentalDays[3];
        String checkoutDate = stringCheckoutDate[3];
        String dueDate = stringDueDate[3];
        int numberOfChargeDays = chargeDays[3];
        double inputTotalBefore = inputTotalBeforeDiscount[3]; 
        double inputDiscount = inputDiscountAmount[3];
        int discount = percentDiscount[3];
        
        ToolRentalFeatures toolRentalFeatures = new ToolRentalFeatures(code, checkoutDate,
        		 rentalDays, discount);
        
        Date dateCheckoutDate = toolRentalFeatures.formatSimpleDate(checkoutDate);
        
     // set rental dates for the tool
		List<LocalDate> listOfRentalDays = toolRentalFeatures
				.getDatesDuringRental(dateCheckoutDate, rentalDays);
		
		// set due date for the tool
		Date dateDueDate = toolRentalFeatures.setDueDate(dateCheckoutDate, rentalDays);
		dueDate = toolRentalFeatures.getDueDate(dateDueDate);

		// check if any dates are on a weekend");
		toolRentalFeatures.weekendDuringRental(listOfRentalDays);

		// check if any of the dates fall on Labor Day.");
		ToolRentalFeatures.isLaborDay(listOfRentalDays);

		// check if any of the dates fall on the observed date for 4th of July
		ToolRentalFeatures.isObservedJuly4th(listOfRentalDays);

		// get number of charge days
		numberOfChargeDays = toolRentalFeatures.getChargeDays(rentedTool, listOfRentalDays, 
				rentalDays);

		// get total charge before discount
		double totalChargeBeforeDiscount = toolRentalFeatures
				.totalChargeBeforeDiscount(rentedTool, numberOfChargeDays);
		String formattedTotalChargeBeforeDiscount = toolRentalFeatures
				.getFormattedTotalChargeBeforeDiscount(totalChargeBeforeDiscount);

		//get amount the tool is discounted 
		double discountAmount = toolRentalFeatures.getDiscountAmount(totalChargeBeforeDiscount, 
				discount);
		String formattedDiscountAmount = toolRentalFeatures
				.getFormattedDiscountAmount(discountAmount);
		
		// get the total amount charged to customer after discount
		double finalCharge = toolRentalFeatures.totalChargeAfterDiscount(totalChargeBeforeDiscount, 
							discountAmount);
		String formattedTotalAfterDiscount = toolRentalFeatures
				.getFormattedTotalChargeAfterDiscount(finalCharge);
        
        ToolRentalAgreement toolRentalAgreement = new ToolRentalAgreement
        			(rentedTool, toolRentalFeatures);
        
        double decimalPercentDiscount = discount * .01;
		String formattedDiscountPercent = new DecimalFormat("##%").format(decimalPercentDiscount);
        
        String getToolCode =  rentedTool.toolCode;
        int getRentalDays = toolRentalFeatures.numberOfRentalDays;
        String getCheckoutDate = toolRentalFeatures.userCheckoutDate;
        String getDueDate = toolRentalFeatures.stringDueDate;
        String getDailyCharge = rentedTool.formattedDailyCharge;
        int getChargeDays = toolRentalFeatures.chargeDays;
        String getChargeBeforeDiscount = toolRentalFeatures.formattedTotalBeforeDiscount;
        String getOutputDiscount = formattedDiscountPercent;
        String getDiscountAmount = toolRentalFeatures.formattedDiscountAmount;
        String getChargeAfterDiscount = toolRentalFeatures.formattedTotalAfterDiscount;

        assertEquals(getToolCode, toolCode[3]);
        assertEquals(getRentalDays, numberOfRentalDays[3]);
        assertEquals(getCheckoutDate, stringCheckoutDate[3]);
        assertEquals(getDueDate, stringDueDate[3]);
        assertEquals(getDailyCharge, outputDailyCharge[3]);
        assertEquals(getChargeDays, chargeDays[3]);
        assertEquals(getChargeBeforeDiscount, formattedTotalBeforeDiscount[3]);
        assertEquals(getOutputDiscount, outputPercentDiscount[3]);
        assertEquals(getDiscountAmount, formatDiscountAmount[3]);
        assertEquals(getChargeAfterDiscount, formatTotalAfterDiscount[3]);
	    }
	    
	    
	    @Test
	    public void Test5() throws Exception {
	    System.out.println("\nTest 5");
        String code = toolCode[4];
        Tool rentedTool = new Tool(code);
        
        int rentalDays = numberOfRentalDays[4];
        String checkoutDate = stringCheckoutDate[4];
        String dueDate = stringDueDate[4];
        int numberOfChargeDays = chargeDays[4];
        double inputTotalBefore = inputTotalBeforeDiscount[4]; 
        double inputDiscount = inputDiscountAmount[4];
        int discount = percentDiscount[4];
        
        ToolRentalFeatures toolRentalFeatures = new ToolRentalFeatures(code, checkoutDate,
        		 rentalDays, discount);
        
        Date dateCheckoutDate = toolRentalFeatures.formatSimpleDate(checkoutDate);
        
     // set rental dates for the tool
		List<LocalDate> listOfRentalDays = toolRentalFeatures
				.getDatesDuringRental(dateCheckoutDate, rentalDays);
		
		// set due date for the tool
		Date dateDueDate = toolRentalFeatures.setDueDate(dateCheckoutDate, rentalDays);
		dueDate = toolRentalFeatures.getDueDate(dateDueDate);

		// check if any dates are on a weekend");
		toolRentalFeatures.weekendDuringRental(listOfRentalDays);

		// check if any of the dates fall on Labor Day.");
		ToolRentalFeatures.isLaborDay(listOfRentalDays);

		// check if any of the dates fall on the observed date for 4th of July
		ToolRentalFeatures.isObservedJuly4th(listOfRentalDays);

		// get number of charge days
		numberOfChargeDays = toolRentalFeatures.getChargeDays(rentedTool, listOfRentalDays, 
				rentalDays);

		// get total charge before discount
		double totalChargeBeforeDiscount = toolRentalFeatures
				.totalChargeBeforeDiscount(rentedTool, numberOfChargeDays);
		String formattedTotalChargeBeforeDiscount = toolRentalFeatures
				.getFormattedTotalChargeBeforeDiscount(totalChargeBeforeDiscount);

		//get amount the tool is discounted 
		double discountAmount = toolRentalFeatures.getDiscountAmount(totalChargeBeforeDiscount, 
				discount);
		String formattedDiscountAmount = toolRentalFeatures
				.getFormattedDiscountAmount(discountAmount);
		
		// get the total amount charged to customer after discount
		double finalCharge = toolRentalFeatures.totalChargeAfterDiscount(totalChargeBeforeDiscount, 
							discountAmount);
		String formattedTotalAfterDiscount = toolRentalFeatures
				.getFormattedTotalChargeAfterDiscount(finalCharge);
        
        ToolRentalAgreement toolRentalAgreement = new ToolRentalAgreement
        			(rentedTool, toolRentalFeatures);
        
        double decimalPercentDiscount = discount * .01;
		String formattedDiscountPercent = new DecimalFormat("##%").format(decimalPercentDiscount);
        
        String getToolCode =  rentedTool.toolCode;
        int getRentalDays = toolRentalFeatures.numberOfRentalDays;
        String getCheckoutDate = toolRentalFeatures.userCheckoutDate;
        String getDueDate = toolRentalFeatures.stringDueDate;
        String getDailyCharge = rentedTool.formattedDailyCharge;
        int getChargeDays = toolRentalFeatures.chargeDays;
        String getChargeBeforeDiscount = toolRentalFeatures.formattedTotalBeforeDiscount;
        String getOutputDiscount = formattedDiscountPercent;
        String getDiscountAmount = toolRentalFeatures.formattedDiscountAmount;
        String getChargeAfterDiscount = toolRentalFeatures.formattedTotalAfterDiscount;

        assertEquals(getToolCode, toolCode[4]);
        assertEquals(getRentalDays, numberOfRentalDays[4]);
        assertEquals(getCheckoutDate, stringCheckoutDate[4]);
        assertEquals(getDueDate, stringDueDate[4]);
        assertEquals(getDailyCharge, outputDailyCharge[4]);
        assertEquals(getChargeDays, chargeDays[4]);
        assertEquals(getChargeBeforeDiscount, formattedTotalBeforeDiscount[4]);
        assertEquals(getOutputDiscount, outputPercentDiscount[4]);
        assertEquals(getDiscountAmount, formatDiscountAmount[4]);
        assertEquals(getChargeAfterDiscount, formatTotalAfterDiscount[4]);
	    }
	    
	    
	    @Test
	    public void Test6() throws Exception {
	    System.out.println("\nTest 6");
        String code = toolCode[5];
        Tool rentedTool = new Tool(code);
        
        int rentalDays = numberOfRentalDays[5];
        String checkoutDate = stringCheckoutDate[1];
        String dueDate = stringDueDate[5];
        int numberOfChargeDays = chargeDays[5];
        double inputTotalBefore = inputTotalBeforeDiscount[5]; 
        double inputDiscount = inputDiscountAmount[5];
        int discount = percentDiscount[5];
        
        ToolRentalFeatures toolRentalFeatures = new ToolRentalFeatures(code, checkoutDate,
        		 rentalDays, discount);
        
        Date dateCheckoutDate = toolRentalFeatures.formatSimpleDate(checkoutDate);
        
     // set rental dates for the tool
		List<LocalDate> listOfRentalDays = toolRentalFeatures
				.getDatesDuringRental(dateCheckoutDate, rentalDays);
		
		// set due date for the tool
		Date dateDueDate = toolRentalFeatures.setDueDate(dateCheckoutDate, rentalDays);
		dueDate = toolRentalFeatures.getDueDate(dateDueDate);

		// check if any dates are on a weekend");
		toolRentalFeatures.weekendDuringRental(listOfRentalDays);

		// check if any of the dates fall on Labor Day.");
		ToolRentalFeatures.isLaborDay(listOfRentalDays);

		// check if any of the dates fall on the observed date for 4th of July
		ToolRentalFeatures.isObservedJuly4th(listOfRentalDays);

		// get number of charge days
		numberOfChargeDays = toolRentalFeatures.getChargeDays(rentedTool, listOfRentalDays, 
				rentalDays);

		// get total charge before discount
		double totalChargeBeforeDiscount = toolRentalFeatures
				.totalChargeBeforeDiscount(rentedTool, numberOfChargeDays);
		String formattedTotalChargeBeforeDiscount = toolRentalFeatures
				.getFormattedTotalChargeBeforeDiscount(totalChargeBeforeDiscount);

		//get amount the tool is discounted 
		double discountAmount = toolRentalFeatures.getDiscountAmount(totalChargeBeforeDiscount, 
				discount);
		String formattedDiscountAmount = toolRentalFeatures
				.getFormattedDiscountAmount(discountAmount);
		
		// get the total amount charged to customer after discount
		double finalCharge = toolRentalFeatures.totalChargeAfterDiscount(totalChargeBeforeDiscount, 
							discountAmount);
		String formattedTotalAfterDiscount = toolRentalFeatures
				.getFormattedTotalChargeAfterDiscount(finalCharge);
        
        ToolRentalAgreement toolRentalAgreement = new ToolRentalAgreement
        			(rentedTool, toolRentalFeatures);
        
        double decimalPercentDiscount = discount * .01;
		String formattedDiscountPercent = new DecimalFormat("##%").format(decimalPercentDiscount);
        
        String getToolCode =  rentedTool.toolCode;
        int getRentalDays = toolRentalFeatures.numberOfRentalDays;
        String getCheckoutDate = toolRentalFeatures.userCheckoutDate;
        String getDueDate = toolRentalFeatures.stringDueDate;
        String getDailyCharge = rentedTool.formattedDailyCharge;
        int getChargeDays = toolRentalFeatures.chargeDays;
        String getChargeBeforeDiscount = toolRentalFeatures.formattedTotalBeforeDiscount;
        String getOutputDiscount = formattedDiscountPercent;
        String getDiscountAmount = toolRentalFeatures.formattedDiscountAmount;
        String getChargeAfterDiscount = toolRentalFeatures.formattedTotalAfterDiscount;

        assertEquals(getToolCode, toolCode[5]);
        assertEquals(getRentalDays, numberOfRentalDays[5]);
        assertEquals(getCheckoutDate, stringCheckoutDate[5]);
        assertEquals(getDueDate, stringDueDate[5]);
        assertEquals(getDailyCharge, outputDailyCharge[5]);
        assertEquals(getChargeDays, chargeDays[5]);
        assertEquals(getChargeBeforeDiscount, formattedTotalBeforeDiscount[5]);
        assertEquals(getOutputDiscount, outputPercentDiscount[5]);
        assertEquals(getDiscountAmount, formatDiscountAmount[5]);
        assertEquals(getChargeAfterDiscount, formatTotalAfterDiscount[5]);
	    }
}
